params {

    input                   = null
    outdir                  = "results"

    skip_failed             = false
    max_contigs             = 150

    reference_version       = "1.0"

    prokka_proteins         = null
    prokka_prodigal         = null

    shovill_assembler       = "spades"

    amrfinderplus_db        = null
    arg_amrfinderplus_identmin              = -1
    arg_amrfinderplus_coveragemin           = 0.5
    arg_amrfinderplus_translationtable      = 11
    arg_amrfinderplus_plus                  = false
    arg_amrfinderplus_name                  = false

    arg_hamronization_summarizeformat = 'tsv'

    arg_abricate_db         = 'ncbi'
    arg_abricate_minid      = 80
    arg_abricate_mincov     = 80

    busco_lineage           = "bacteria"
    busco_db_path           = null

    confindr_db             = null

    subsample_reads         = true
    max_coverage            = "100x"
    genome_size             = "6Mb"

    reference_fasta         = null
    reference_gff           = null

    skip_references         = false
    skip_mlst               = false
    
    skip_porechop           = true

    onthq                   = true
    ont_min_length          = 5000
    ont_min_q               = 10
    ont_min_reads           = 1000

    reference_base          = null
    help                    = false

    build_references        = false

    logo                    = "${baseDir}/assets/pipelinelogo.png"
    run_name                = null

    skip_report             = false
    skip_cgmlst             = false
    skip_circos             = false
    
    plaintext_email         = false
    skip_multiqc            = false
    email                   = false

    max_memory              = 128.GB
    max_cpus                = 16
    max_time                = 240.h
    maxMultiqcEmailFileSize = 25.MB

    multiqc_config          = "${baseDir}/conf/multiqc_config.yaml"
    multiqc_logo            = "${baseDir}/assets/pipelinelogo.png"

    publish_dir_mode        = "copy"

    custom_config_base      = "https://raw.githubusercontent.com/bio-raum/nf-configs/main"

}

manifest {
    name = "bio-raum/gabi"
    version = "0.7"
    description = "GABI Pipeline for assembly and profiling of bacterial isolates"
    author = "Marc Hoeppner"
    homePage = "https://github.com/bio-raum/gabi"
    nextflowVersion = "24.04.3"
}

process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
    overwrite = true
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_timeline.html"
}
report {
    overwrite = true
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_report.html"
}
trace {
    overwrite = true
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_trace.txt"
}
dag {
    overwrite = true
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_dag.svg"
}

// Module-specific configuration options
includeConfig 'conf/modules.config'

// Load centrally stored profiles
try {
    includeConfig "${params.custom_config_base}/custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load remote pipeline profiles: ${params.custom_config_base}/custom.config")
}

// load the default config files
includeConfig 'conf/base.config'
includeConfig 'conf/resources.config'

profiles {
    
    docker { 
        docker.enabled = true 
        singularity.enabled = false
        podman.enabled = false
        conda.enabled = false
        apptainer.enabled = false
    }
    singularity {
        docker.enabled = false
        podman.enabled = false
        conda.enabled = false
        apptainer.enabled = false
        singularity.enabled = true
    }
    podman {
        docker.enabled = false
        singularity.enabled = false
        conda.enabled = false
        apptainer.enabled = false
        podman.enabled = true
    }
    conda {
        docker.enabled = false
        podman.enabled = false
        singularity.enabled = false
        apptainer.enabled = false
        conda.enabled = true
    }
    apptainer {
        apptainer.enabled = true
        docker.enabled = false
        podman.enabled = false
        singularity.enabled = false
        conda.enabled = false
    }
    test {
        includeConfig 'conf/test.config'
    }
    test_ont {
        includeConfig 'conf/test_ont.config'
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if(type == 'memory'){
        try {
            if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'time'){
        try {
            if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'cpus'){
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

